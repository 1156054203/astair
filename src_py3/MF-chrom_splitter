#!/usr/bin/env python3

import click
import pysam
from Bio import SeqIO
import re
import csv
from datetime import datetime


@click.command()
@click.option('input_file', '--input_file', required=True, help='BAM format file containing sequencing reads.')
@click.option('fasta_file', '--fasta_file', required=True, help='DNA sequence in fasta format used for aligning the sequencing reads and mpileup.')
@click.option('directory', '--directory', required=True, type=str, help='Output directory to save files.')

def filter_exec(input_file, fasta_file, directory):
    filter(input_file, fasta_file, directory)

def filter(input_file, fasta_file, directory):
    
    time_b = datetime.now()
    
    if list(directory)[-1]!="/":
        directory = directory + "/"

    try:
        key=[]
        with open(fasta_file, "rU") as handle:
            for record in SeqIO.parse(handle, "fasta"):
                key.append(record.id)
    except IOError:
        print('ERROR: There is no such fasta file.') 
        
    chromosomes = dict()
    for item in key:
        chromosomes[item] = 0

    try:
        if len(re.split(r'^/(.*)/', input_file)) == 1:
            no_dir = None
        elif len(re.split(r'^/(.*)/', input_file)) > 1:
            no_dir = re.split(r'^/(.*)/', input_file)[-1]
        if no_dir:
            input_dir = re.match(r'^/(.*)/', input_file).group()
            name = re.match(r'^.*(?=.bam)', no_dir).group()
        else:
            name = re.match(r'^.*(?=.bam)', input_file).group()
        inbam = pysam.AlignmentFile(input_file, "rb")
        for k in range(len(key)):
            bam_fetch = inbam.fetch(key[k])
            data = pysam.AlignmentFile(name +'.'+key[k]+".bam", "wb", template = inbam)
            for read in bam_fetch:
                data.write(read)
                chromosomes[key[k]] += 1
        inbam.close()
        time_e = datetime.now() 
        with open(directory + name + '_total_read_per_chromosome.log', 'w', newline='') as myfile:
            wr = csv.writer(myfile, delimiter='\t', lineterminator='\n')
            wr.writerow(['       Reads distribution per chromosome      '])
            wr.writerow(['..............................................'])
            for k in range(len(key)):
                wr.writerow([key[k], chromosomes[key[k]]])
            wr.writerow(['..............................................'])
            wr.writerow(['Total run time, seconds: ', (time_e - time_b).total_seconds()]) 
    except IOError:
        print('ERROR: There is no such bam file.') 
    except ValueError:
        print('ERROR: The bam file has no index.')
 


if __name__ == '__main__':
    filter_exec()
